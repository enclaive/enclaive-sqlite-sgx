
#include <string>
#include <string.h>
#include <stdlib.h>
#include "../Enclave/sqlite3.h"
#include "../Enclave/Enclave_t.h" // Headers for trusted part (autogenerated by edger8r)
#include "sgx_tseal.h"
#include "sgx_tprotected_fs.h"

sqlite3* db; // Database connection object

// SQLite callback function for printing results
static int callback(void *NotUsed, int argc, char **argv, char **azColName){
    int i;
    for(i = 0; i < argc; i++){
        std::string azColName_str = azColName[i];
        std::string argv_str = (argv[i] ? argv[i] : "NULL");
        ocall_print_string((azColName_str + " = " + argv_str + "\n").c_str());
    }
    ocall_print_string("\n");
    return 0;
}

void ecall_opendb(const char *dbname){
    int rc; // For return status of SQLite
    rc = sqlite3_open(dbname, &db); // Opening database
    if (rc) {
        ocall_println_string("SQLite error - can't open database connection: ");
        ocall_println_string(sqlite3_errmsg(db));
        return;
    }
    ocall_print_string("Enclave: Created database connection to ");
    ocall_println_string(dbname);
}

int open64(const char *filename, int flags, ...){
    mode_t mode = 0; // file permission bitmask


    int ret;
    sgx_status_t status = ocall_open64(&ret, filename, flags, mode);
    if (status != SGX_SUCCESS) {
        char error_msg[256];
        snprintf(error_msg, sizeof(error_msg), "%s%s", "Error: when calling ocall_", __func__);
        ocall_print_error(error_msg);
    }
    return ret;
}

SGX_FILE* ecall_fopen(const char* filename, const char* mode)
{
	SGX_FILE* a;
	a = sgx_fopen_auto_key(filename, mode);
	return a;
}

int32_t ecall_fclose(SGX_FILE* fp)
{
	int32_t a;
	a = sgx_fclose(fp);
	return a;
}


size_t ecall_fwrite(SGX_FILE* fp, char data[100])
{
	size_t sizeofWrite;
	size_t len = strlen(data);
	sizeofWrite = sgx_fwrite(data, sizeof(char), len, fp);

	/*for (int i = 0; i < 5; i++)
	{
		char buffer[] = { 'x' , 'c' };
		sizeofWrite += sgx_fwrite(buffer, sizeof(char), sizeof(buffer), fp);
	}*/
	return sizeofWrite;
}

uint64_t ecall_fsize(SGX_FILE * fp)
{
	uint64_t file_size = 0;
	sgx_fseek(fp, 0, SEEK_END);
	file_size = sgx_ftell(fp);
	return file_size;
}


size_t ecall_fread(SGX_FILE* fp, char* readData, uint64_t size)
{
	char *data;
	uint64_t startN = 1;
	sgx_fseek(fp, 0, SEEK_END);
	uint64_t finalN = sgx_ftell(fp);
	sgx_fseek(fp, 0, SEEK_SET);
	data = (char*)malloc(sizeof(char)*finalN);
	memset(data, 0, sizeof(char)*finalN);

	size_t sizeofRead = sgx_fread(data, startN, finalN, fp);
	int len = strlen(data);
	memcpy(readData, data, sizeofRead);
	memset(readData+sizeofRead, '\0', 1);
	return sizeofRead;
}

void ecall_execute_sql(const char *sql){
    int rc;
    char *zErrMsg = 0;
    rc = sqlite3_exec(db, sql, callback, 0, &zErrMsg);
    if (rc) {
        ocall_print_string("SQLite error: ");
        ocall_println_string(sqlite3_errmsg(db));
        return;
    }
}

void ecall_closedb(){
    sqlite3_close(db);
    ocall_println_string("Enclave: Closed database connection");
}
