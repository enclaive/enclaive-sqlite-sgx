#include <string>
#include <string.h>
#include <stdlib.h>
#include "Enclave_t.h" // Headers for trusted part (autogenerated by edger8r)
#include "SgxVfsHandler.h"
#include "sqlite3.h"
#include "sgx_tseal.h"
#include "sgx_tprotected_fs.h"

sqlite3 *db; // Database connection object

// SQLite callback function for printing results
static int callback(void *NotUsed, int argc, char **argv, char **azColName) {
	int i;
	for (i = 0; i < argc; i++) {
		std::string azColName_str = azColName[i];
		std::string argv_str = (argv[i] ? argv[i] : "NULL");
		ocall_print_string((azColName_str + " = " + argv_str + "\n").c_str());
	}
	ocall_print_string("\n");
	return 0;
}

void ecall_opendb(const char *dbname) {
	int rc; // For return status of SQLite
	rc = sqlite3_open_v2(dbname, &db, SQLITE_OPEN_READWRITE, getSgxVfsName().c_str()); // Opening database

	char *zErrMsg = 0;
	//rc = sqlite3_exec(db, "PRAGMA main.shrink_memory", callback, 0, &zErrMsg);
	//rc = sqlite3_exec(db, "PRAGMA main.locking_mode = EXCLUSIVE", callback, 0, &zErrMsg);
	//rc = sqlite3_exec(db, "PRAGMA main.mmap_size = 2000", callback, 0, &zErrMsg);
	//rc = sqlite3_exec(db, "PRAGMA temp_store = MEMORY", callback, 0, &zErrMsg);
	//rc = sqlite3_exec(db, "PRAGMA page_size=512; VACUUM;", callback, 0, &zErrMsg);
	sqlite3_soft_heap_limit64(10000);
	if (rc) {
		ocall_println_string("SQLite error - can't open database connection: ");
		ocall_println_string(sqlite3_errmsg(db));
		return;
	}
	ocall_print_string("Enclave: Created database connection to ");
	ocall_println_string(dbname);
}

SGX_FILE* ecall_fopen(const char *filename, const char *mode) {
	SGX_FILE *a;
	a = sgx_fopen_auto_key(filename, mode);
	return a;
}

int32_t ecall_fclose(SGX_FILE *fp) {
	int32_t a;
	a = sgx_fclose(fp);
	return a;
}

size_t ecall_fwrite(SGX_FILE *fp, char data[100]) {
	size_t sizeofWrite;
	size_t len = strlen(data);
	sizeofWrite = sgx_fwrite(data, sizeof(char), len, fp);
	return sizeofWrite;
}

uint64_t ecall_fsize(SGX_FILE *fp) {
	uint64_t file_size = 0;
	sgx_fseek(fp, 0, SEEK_END);
	file_size = sgx_ftell(fp);
	return file_size;
}

size_t ecall_fread(SGX_FILE *fp, char *readData, uint64_t size) {
	char *data;
	uint64_t startN = 1;
	sgx_fseek(fp, 0, SEEK_END);
	uint64_t finalN = sgx_ftell(fp);
	sgx_fseek(fp, 0, SEEK_SET);
	data = (char*) malloc(sizeof(char) * finalN);
	memset(data, 0, sizeof(char) * finalN);

	size_t sizeofRead = sgx_fread(data, startN, finalN, fp);
	int len = strlen(data);
	memcpy(readData, data, sizeofRead);
	memset(readData + sizeofRead, '\0', 1);
	return sizeofRead;
}

void ecall_execute_sql(const char *sql) {
	int rc;
	char *zErrMsg = 0;
	rc = sqlite3_exec(db, sql, callback, 0, &zErrMsg);
	if (rc) {
		ocall_print_string("SQLite error: ");
		ocall_println_string(sqlite3_errmsg(db));
		return;
	}
}

void ecall_closedb() {
	sqlite3_close_v2(db);
	//ocall_println_string("Enclave: Closed database connection");
}
