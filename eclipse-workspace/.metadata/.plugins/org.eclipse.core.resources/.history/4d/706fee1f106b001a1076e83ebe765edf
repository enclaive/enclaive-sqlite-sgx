/*
 * SgxVfsHandler.cpp
 *
 *  Created on: 04.03.2020
 *      Author: sgx
 */
#include <string.h>
#include <mutex>
#include <assert.h>
#include <random>
#include "sqlite3.h"

#include "../Enclave/Enclave_t.h"
#include "../Enclave/sqlite3.h"
#include "sgx_tprotected_fs.h"



#include "sgx_urts.h"



std::string getSgxVfsName() {
	// a mutex protects the body of this function because we don't want to register the VFS twice
	static std::mutex mutex;
	std::lock_guard<std::mutex> lock(mutex);

	// check if the VFS is already registered, in this case we directly return
	static const char *vfsName = "sgx_vfs_handler";
	if (sqlite3_vfs_find(vfsName) != nullptr)
		return vfsName;

	// this is the structure that will store all the custom informations about an opened file
	// all the functions get in fact pointer to an sqlite3_file object
	// we give SQLite the size of this structure and SQLite will allocate it for us
	// 'xOpen' will have to call all the members' constructors (using placement-new), and 'xClose' will call all the destructors
	struct File: sqlite3_file {
		SGX_FILE *sgxData;         // pointer to the source stream
		int lockLevel; 			   // level of lock by SQLite ; goes from 0 (not locked) to 4 (exclusive lock)
	};

	// making sure that the 'sqlite3_file' structure is at offset 0 in the 'File' structure
	static_assert(offsetof(File, pMethods) == 0, "Wrong data alignment in custom SQLite3 VFS, lots of weird errors will happen during runtime");
	// structure which contains static functions that we are going to pass to SQLite
	// TODO: VC++2010 doesn't support lambda function treated as regular functions, or we would use this
	struct Functions {
		// opens a file by filling a sqlite3_file structure
		// the name of the file should be the offset in memory where to find a "std::shared_ptr<std::iostream>"
		// eg. you create a "std::shared_ptr<std::iostream>" whose memory location is 0x12345678
		//      you have to pass "12345678" as the file name
		// this function will make a copy of the shared_ptr and store it in the sqlite3_file

		static int xOpen(sqlite3_vfs*, const char *zName,
				sqlite3_file *fileBase, int flags, int *pOutFlags) {

			static sqlite3_io_methods methods;
			methods.iVersion = 1;
			methods.xClose = &xClose;
			methods.xRead = &xRead;
			methods.xWrite = &xWrite;
			methods.xTruncate = &xTruncate;
			methods.xSync = &xSync;
			methods.xFileSize = &xFileSize;
			methods.xLock = &xLock;
			methods.xUnlock = &xUnlock;
			methods.xCheckReservedLock = &xCheckReservedLock;
			methods.xFileControl = &xFileControl;
			methods.xSectorSize = &xSectorSize;
			methods.xDeviceCharacteristics = &xDeviceCharacteristics;
			fileBase->pMethods = &methods;

			auto fileData = static_cast<File*>(fileBase);


			ocall_println_string("Open");

			int tmpInt2 = SQLITE_OPEN_READWRITE;
			int tmpInt4 = SQLITE_OPEN_CREATE;
			int tmpInt256 = SQLITE_OPEN_MAIN_DB;
			int tmpint2048 = SQLITE_OPEN_MAIN_JOURNAL;
			int tmpInt4096 = SQLITE_OPEN_TEMP_JOURNAL;
			int tmpInt52488 = SQLITE_OPEN_WAL;

			int tmpInt258 = SQLITE_OPEN_READWRITE | SQLITE_OPEN_MAIN_DB;
			int tmpInt2054 = SQLITE_OPEN_READWRITE | SQLITE_OPEN_MAIN_JOURNAL | SQLITE_OPEN_CREATE;


			if (flags == (SQLITE_OPEN_READWRITE | SQLITE_OPEN_MAIN_DB )) {
				ocall_println_string("MainDB");
				fileData->sgxData = sgx_fopen_auto_key(zName, "rb+");
			}

			if (flags == (SQLITE_OPEN_READWRITE | SQLITE_OPEN_MAIN_JOURNAL | SQLITE_OPEN_CREATE)) {
				const char  dbJournal= zName + "-journal";
				fileData->sgxData = sgx_fopen_auto_key(dbJournal, "wb+");
			}


			if (fileData->sgxData == 0x0) {
				ocall_println_string("setSgxData");

			} else {
				ocall_println_string("setSgxData : already set");
			}

/*

            // SQLite allocated a buffer large enough to use it as a "File" object (see above)
            auto fileData = static_cast<File*>(fileBase);
            fileData->lockLevel = 0;

            // if the name of the file doesn't contain a lexical_cast'ed pointer, then this is not our main DB file
            //  (note: the flags can also be used to determine this)
            if (zName == nullptr || strlen(zName) != sizeof(void*) * 2) {

                assert(flags | SQLITE_OPEN_CREATE);
                // if this is not our main DB file, we create a temporary stringstream that will be deleted when the file is closed
                // this behavior is different than expected from a file system (where file are permanent)
                //   but SQLite seems to accept it
                new (&fileData->stream) std::shared_ptr<std::iostream>(std::make_shared<std::stringstream>(std::ios_base::in | std::ios_base::out | std::ios_base::binary));

            } else {
                // decoding our pointer, ie. un-lexical_cast'ing it
                std::stringstream filenameStream(zName);
                void* sharedPtrAddress = nullptr;
                filenameStream >> sharedPtrAddress;
                // our pointer points to a shared_ptr<std::iostream>, we make a copy of it
                new (&fileData->stream) std::shared_ptr<std::iostream>(*static_cast<std::shared_ptr<std::iostream>*>(sharedPtrAddress));
            }

            assert(fileData->stream->good());

            // I don't really know what to output as flags
            // the "winOpen" implementation only sets either "readwrite" or "readonly"
            if (pOutFlags != nullptr)
                *pOutFlags = SQLITE_OPEN_READWRITE;

            */

            return SQLITE_OK;
		}

		static int xClose(sqlite3_file *fileBase) {
			ocall_println_string("Close");
			int32_t result = 0;
			int32_t error = 0;
			result = sgx_fclose(static_cast<File*>(fileBase)->sgxData);
			error = sgx_ferror(static_cast<File*>(fileBase)->sgxData);

//			if (result == 1)
//				return SQLITE_IOERR_CLOSE;
			return SQLITE_OK;
		}

		static int xRead(sqlite3_file *fileBase, void *buffer, int quantity,
				sqlite3_int64 offset) {
			int32_t error;
			int resultSeek = 0;
			int resultRead = 0;

			resultSeek = sgx_fseek(static_cast<File*>(fileBase)->sgxData,
					offset, SEEK_SET);
			error = sgx_ferror(static_cast<File*>(fileBase)->sgxData);
//
//			if (resultSeek == -1) {
//				return SQLITE_IOERR_SEEK;
//			}

			resultRead = sgx_fread(buffer, sizeof(char), quantity,
					static_cast<File*>(fileBase)->sgxData);
			error = sgx_ferror(static_cast<File*>(fileBase)->sgxData);

//			if (resultRead == 0 && false) {
//				return SQLITE_IOERR_READ;
//			}

			return SQLITE_OK;
		}

		static int xWrite(sqlite3_file *fileBase, const void *buffer,
				int quantity, sqlite3_int64 offset) {
			int32_t resultSeek = 0;
			int32_t resultWrite = 0;

			auto fileData = static_cast<File*>(fileBase);

			xSync(fileBase, 1);

			if(fileData->sgxData == 0x0) {
				ocall_println_string("SgxData Pointer not referenced");
				auto tmp25 = sgx_fopen_auto_key("test.db", "rb+");
				fileData->sgxData = tmp25;
			} else {
				ocall_println_string("SgxData Pointer ok");
			}

			resultSeek = sgx_fseek(fileData->sgxData,
					offset,
					SEEK_SET);

			if (resultSeek == -1) {
				//return SQLITE_IOERR_SEEK;
			}

			resultWrite = sgx_fwrite(buffer, sizeof(char), quantity,
					fileData->sgxData);

			if (resultWrite == 0) {
				//return SQLITE_IOERR_WRITE;
				//ocall_println_string("SQLITE_IOERR_WRITE");
			} else {
				//ocall_println_string("SQLITE_OK");
			}

			return SQLITE_OK;
		}

		static int xSync(sqlite3_file *fileBase, int) {
			sgx_fflush(static_cast<File*>(fileBase)->sgxData);
			return SQLITE_OK;
		}

		static int xFileSize(sqlite3_file *fileBase,
				sqlite3_int64 *outputSize) {
			uint64_t file_size = 0;
			sgx_fseek(static_cast<File*>(fileBase)->sgxData, 0, SEEK_END);
			file_size = sgx_ftell(static_cast<File*>(fileBase)->sgxData);

			*outputSize = file_size;
			return SQLITE_OK;
		}

		static int xLock(sqlite3_file *fileBase, int level) {
			//ocall_println_string("LOCK");
			static_cast<File*>(fileBase)->lockLevel = level;
			return SQLITE_OK;
		}

		static int xUnlock(sqlite3_file *fileBase, int level) {
			//ocall_println_string("UNLOCK");
			static_cast<File*>(fileBase)->lockLevel = level;
			return SQLITE_OK;
		}

		static int xCheckReservedLock(sqlite3_file *fileBase, int *pResOut) {
			File *fileData = static_cast<File*>(fileBase);
			*pResOut = (fileData->lockLevel >= 1);
			return SQLITE_OK;
		}

		static int xFileControl(sqlite3_file *fileBase, int op, void *pArg) {

			// this function is bit weird because it's supposed to handle generic operations
			// the 'op' parameter is the operation code, and 'pArg' points to the arguments of the operation

			auto fileData = static_cast<File*>(fileBase);

			switch (op) {
			case SQLITE_FCNTL_LOCKSTATE:
				// outputs the current lock level of the file in reinterpret_cast<int*>(pArg)
				*reinterpret_cast<int*>(pArg) = fileData->lockLevel;
				break;

			case SQLITE_FCNTL_SIZE_HINT:
				// gives a hint about the size of the final file in reinterpret_cast<int*>(pArg)
				ocall_println_string("xFileControl : SQLITE_FCNTL_SIZE_HINT");
				break;

			case SQLITE_FCNTL_CHUNK_SIZE:
				// gives a hint about the size of blocks of data that SQLite will write at once
				ocall_println_string("xFileControl : SQLITE_FCNTL_CHUNK_SIZE");
				break;

				// some operations are not documented (and not used in practice),
				//   so I'll leave them alone
			case SQLITE_GET_LOCKPROXYFILE:
				return SQLITE_ERROR;
			case SQLITE_SET_LOCKPROXYFILE:
				return SQLITE_ERROR;
			case SQLITE_LAST_ERRNO:
				return SQLITE_ERROR;
			}

			return SQLITE_OK;
		}

		static int xSectorSize(sqlite3_file*) {
			return 512;
		}

		static int xDeviceCharacteristics(sqlite3_file*) {
			return SQLITE_IOCAP_ATOMIC | SQLITE_IOCAP_SAFE_APPEND
					| SQLITE_IOCAP_SEQUENTIAL;
		}

		static int xDelete(sqlite3_vfs*, const char *zName, int syncDir) {
			return SQLITE_OK;
		}

		static int xAccess(sqlite3_vfs*, const char *zName, int flags,
				int *pResOut) {
			*pResOut = (strlen(zName) == sizeof(void*) * 2);
			return SQLITE_OK;
		}

		static int xFullPathname(sqlite3_vfs*, const char *zName, int nOut,
				char *zOut) {
			// this function turns a relative path into an absolute path
			// since our file names are just lexical_cast'ed pointers, we just strcpy
			std::strncpy(zOut, zName, nOut);

			return SQLITE_OK;
		}

		static int xCurrentTime(sqlite3_vfs*, double *output) {
			// this function should return the number of days elapsed since
			//   "noon in Greenwich on November 24, 4714 B.C according to the proleptic Gregorian calendar"
			// I picked this constant from sqlite3.c which will make our life easier
			static const double unixEpoch = 2440587.5;

			ocall_println_string("xCurrentTimeInt64");

			*output = unixEpoch + 1 / (60.*60.*24.);
			return SQLITE_OK;
		}

		static int xCurrentTimeInt64(sqlite3_vfs*, sqlite3_int64 *output) {
			// this function should return the number of milliseconds elapsed since
			//   "noon in Greenwich on November 24, 4714 B.C according to the proleptic Gregorian calendar"
			// I picked this constant from sqlite3.c which will make our life easier
			// note: I wonder if it is not hundredth of seconds instead
			static const sqlite3_int64 unixEpoch = 24405875
					* sqlite3_int64(60 * 60 * 24 * 100);

			ocall_println_string("xCurrentTimeInt64");

			*output = unixEpoch + 1 * 1000;
			return SQLITE_OK;
		}

		static int xRandomness(sqlite3_vfs*, int nByte, char *zOut) {
			// this function generates a random serie of characters to write in 'zOut'
			// we use C++0x's <random> features

			static std::mt19937 randomGenerator;
			/*static std::uniform_int<char> randomDistributor;

			for (auto i = 0; i < nByte; ++i)
				zOut[i] = randomDistributor(randomGenerator);
			*/

			ocall_println_string("xRandomness");
			return SQLITE_OK;
		}

		static int xTruncate(sqlite3_file *fileBase, sqlite3_int64 size) {
			ocall_println_string("xTruncate");
			// it is not possible to truncate a stream
			// it makes sense to truncate a file or a buffer, but not a generic stream
			// however it is possible to implement the xTruncate function as a no-op
			return SQLITE_OK;
		}

		static int xSleep(sqlite3_vfs*, int microseconds) {
			ocall_println_string("xSleep");
			//std::this_thread::sleep(std::chrono::microseconds(microseconds));
			return SQLITE_OK;
		}

	};

	// creating the VFS structure
	// TODO: some functions are not implemented due to lack of documentation ; I'll have to read sqlite3.c to find out
	static sqlite3_vfs readStructure;
	memset(&readStructure, 0, sizeof(readStructure));
	readStructure.iVersion = 2;
	readStructure.szOsFile = sizeof(File);
	readStructure.mxPathname = 256;
	readStructure.zName = vfsName;
	readStructure.pAppData = nullptr;
	readStructure.xOpen = &Functions::xOpen;
	readStructure.xDelete = &Functions::xDelete;
	readStructure.xAccess = &Functions::xAccess;
	readStructure.xFullPathname = &Functions::xFullPathname;
	/*readStructure.xDlOpen = &Functions::xOpen;
	 readStructure.xDlError = &Functions::xOpen;
	 readStructure.xDlSym = &Functions::xOpen;
	 readStructure.xDlClose = &Functions::xOpen;*/
	readStructure.xRandomness = &Functions::xRandomness;
	readStructure.xSleep = &Functions::xSleep;
	readStructure.xCurrentTime = &Functions::xCurrentTime;
	//readStructure.xGetLastError = &Functions::xOpen;
	readStructure.xCurrentTimeInt64 = &Functions::xCurrentTimeInt64;

	// the second parameter of this function tells if
	//   it should be made the default file system
	sqlite3_vfs_register(&readStructure, false);

	return vfsName;
}

